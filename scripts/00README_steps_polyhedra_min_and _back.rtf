{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww27400\viewh18540\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs48 \cf0 \
This directory contains a version of the blue triangle with a red vertex and a red open segment.\
\
It is used to illustrate the whole procedure of starting from a polyhedral model (as input for PolyLogicA), and encode it into an LTS for minimisation with mcrl2 branching equivalence for SLCS_ETA. It also shows the inverse direction, on how one can use PolyLogicA model checking on the minimal model and translate the results back to the original full polyhedral model and visualise it.\
\
Unfortunately, the minimal model of the triangle is not a polyhedral model itself, so I\'92m not sure whether we can really apply PolyLogicA on it directly, but we can certainly use it to visualise the equivalence classes found with the minimisation procedure.\
\
We should now have prototypes of code for all these transformations, whereas for some other steps code/operators are available via the mcrl2 toolset or has been produced already in earlier steps by others. \
\
Summary of steps to be performed:\
\
1) Produce an input polyhedral model for PolyLogicA in .json format. For small models this can be done manually, as for the triangle example. For larger ones, such as the maze example, they can be generated, together with an atoms file for the atomic propositions and a color file for the colours of the atomic propositions that will be used by the Visualiser.\
\
For the Triangle example these files have been constructed manually:\
\
- triangleRBAtoms.json is the atoms file\
- triangleRBColors.json is the colors file\
- triangleRBModel.json is the model file for input to PolyLogicA\
\
These three files can be used with the Visualizer, and a copy of them can be found in the directory of VoxLogicA/releases/polyVisualizer_2.0.\
\
2) The PolyLogicA json \'93triangleRBModel.json\'94 can be used as input to the PolyPoProject operator, written in F#, to generate a poset file from it. The resulting file is triangleRBModel_Poset.json. (For those who were there: This is a file similar to those we used to encode posets into LTSs in mcrl2 format and input language in May 2023 in Pisa in collaboration with David et al..)\
\
3) The poset file triangleRBModel_Poset.json can now be encoded with one of the (eta-)encoders written in python. In this example we used the one that generates fewer tau-transitions. It works as follows:\
\
> python /Users/mieke/Documents/RESEARCH/VVTOOLS/MCRL2_PYTHON/encodermm_enc_eta_clean_simpler_fewer_tau.py \{base_name\}_Poset.json\
\
This python script produces a .mcrl2 file with the eta-encoding represented as an LTS. In the example this is file triangleRBModel_Poset.mcrl2.\
\
4) The file triangleRBModel_Poset.mcrl2 can now be transformed into a mcrl2 .lps and .lts and the minimised.lts by means of the script min_spec.py.\
In the example these are the files, respectively:\
\
- triangleRBModel_Poset.lps\
- triangleRBModel_Poset.lts\
- triangleRBModel_Poset_minimised.lts\
\
5) The .lps file is not human readable, but with lpspp (lps pretty print) one can obtain a textual format of it from which one can recover the internal state-labels of the .lts in the way they are also used when producing a graph of such lts\'92s with ltsgraph. One needs also the triangleRBModel_Poset.mcrl2 file to find the correspondence in the states of the LTS in the .mcrl file (t1_0, t1_1 etc) and those in the .lts (1,2,3 ..).\
\
Laura Bussi is looking into that to write a F# or python script that lists this correspondence. Update: meanwhile Mieke made a feasibility study writing preliminary code in F# which can be found in the \'93class2Atoms\'94 F# project. The main project file includes\
indications on how to use this code (I.e. what files it needs as input and how they should be produced exactly). \
\
In the example files, the result of lpspp can be found in triangleRBModel_Poset.txt. Unfortunately, the terms in that file do not always follow the same order as the terms in the sums in the .mcrl2 file (contrary to what was expected initially). One can also include these numbers as option in the lpspp command, but this should NOT be done when one wants to apply the \'93class2Atoms\'94 code.\
\
6) The order of the cells listed in the atoms.json file is the same as the order in which they are defined in the triangleRBModel.json file for PolyLogicA. So, any results, such as equivalence classes or model checking results on the minimised model, need to be converted into lists of false/true in the right order for each property in the atoms file. At the moment\
They are just printed in json format with printfn but this should be changed to the generation of (separate?) Atoms files.\
\
The code \'93class2Atoms\'94 needs the ltsinfo of the minimised and full .lts files. These can be written into a file using the online mcrl2 command:\
\
> ltsinfo -l filename.lts >& output.txt\
\
Note the >&, if only > is used then the results are only written to the terminal.\
\
One needs these info for both the full and the minimised .lts to translate back the results on the minimised to the original states of the full .lts. After that these need to be put into the order in which the cells were defined in the Model.json file. This is now taken care of by \'93class2Atoms\'94. This needs two additional files as input:\
\
- an .txt file that is the result of lpspp applied on the .lps file (which in turn is the result of mcrl22lps). See \'93class2Atoms\'94 main project file for details on parameter settings of mcrl22lps).\
\
- the .mcrl2 specification itself.\
\
TO BE DONE: For this we still need to produce some code to do this automatically. See worked example below. (Actually there is now some first code in F# by Mieke that still needs testing and improvement. It is only a first feasibility study.)\
\
The info with ltsinfo -l for the minimised model triangleRBModel_Poset_minimised.lts gives: \
\
0: (5).\
1: (4).\
1: (7).\
1: (2).\
1: (6).\
1: (1).\
2: (3).\
\
This means that there are 3 equivalence classes: 0,1,2 (labels of states in the minimised.lts)\
The lts states 4,7,2,6 and 1 of the full .lts are mapped to class 1.\
The lts state 5 is mapped to class 0\
The lts state 3 is mapped to class 2\
\
Furthermore, from point 5) above we can recover the mapping between .lts states and the states in the .mcrl2 encoded LTS. These are:\
\
t1_0= 1 (blue)\
t1_1= 2 (blue)\
t1_2= 3 (red)\
t1_3= 5 (red)\
t1_4= 6 (blue)\
t1_5= 4 (blue)\
t1_6= 7 (blue)\
\
Where t1_0, t1_1 are states of the encoded LTS in the triangleRBModel_Poset.mcrl2 file.\
\
From this we can obtain that:\
\
t1_2 is in class 2\
t1_3 is in class 0\
All others are in class 1\
\
So the atoms list for class 0 would need to be:\
\
\'93Class0\'94: [\
   false,\
   false,\
   false,\
   true,\
   false,\
   false,\
   false\
],\
\'93Class1\'94: [\
   true,\
   true,\
   false,\
   false,\
   true,\
   true,\
   true\
],\
\'93Class2\'94: [\
   false,\
   false,\
   true,\
   false,\
   false,\
   false,\
   false\
]\
\
7) Open problem is whether for examples of which the minimised model via SLCSeta is not a Polyhedron we can still use PolyLogicA. Probably one needs some slight modifications? VoxLogicA can deal with Kripke structures, so perhaps this is not a serious problem.\
\
8) NEW PROBLEM: The order in which the summands are numbered and present in the lpspp txt file is NOT always the order in which they appear in the .mcrl2 LTS specification. In particular, it seems that for each process the order of the summands is correct, but it \'93jumps\'94 sometimes from one process definition to another skipping the one in between and leaving that for later.\
Note that the summands of a process considered as a string could identify the particular process to which it belongs. Let\'92s assume there are no two processes with exactly the same summands. I think this is indeed so because each process by construction represents a state and thus has a self-loop with an atomic proposition label. So, among the summands there should always be this self-loop, and so it is different from all the others (two processes cannot have the same name in .mcrl2).\
This could help in some way to identify the processes (and their identification number) in the lpspp.txt file.\
Not sure yet how to deal with this in F# in a correct and efficient way. Have sent also an email to Jan Friso Groote to ask for further suggestions (on Jan. 26, 2024). No answer as yet received.\
\
9) Resolved all on 2024/02/01. Call dotnet \'93class2Atoms\'94 application from its directory as follows\
\

\f1 \cf2 \CocoaLigature0 for the triangleRB example:\
\
> dotnet run /Users/mieke/Documents/RESEARCH/VVTOOLS/MCRL2_PYTHON/examples/00_examples_json_specs_enc_eta_clean_with_loops/geoTriangleRB_PolyLogicA_spec/ltsinfo_full.txt /Users/mieke/Documents/RESEARCH/VVTOOLS/MCRL2_PYTHON/examples/00_examples_json_specs_enc_eta_clean_with_loops/geoTriangleRB_PolyLogicA_spec/ltsinfo_minimised.txt /Users/mieke/Documents/RESEARCH/VVTOOLS/MCRL2_PYTHON/examples/00_examples_json_specs_enc_eta_clean_with_loops/geoTriangleRB_PolyLogicA_spec/triangleRBModel_Poset.txt /Users/mieke/Documents/RESEARCH/VVTOOLS/MCRL2_PYTHON/examples/00_examples_json_specs_enc_eta_clean_with_loops/geoTriangleRB_PolyLogicA_spec/triangleRBModel_Poset.mcrl2
\f0 \cf0 \CocoaLigature1 \
\
\
for example squareRGB Fig 26:\
\
> 
\f1 \cf2 \CocoaLigature0 dotnet run /Users/mieke/Documents/RESEARCH/VVTOOLS/MCRL2_PYTHON/examples/00_examples_json_specs_enc_eta_clean_with_loops/squareRGB_fig26_PolyLogicA_spec/squareRGB_fig26_poset_python_full.txt /Users/mieke/Documents/RESEARCH/VVTOOLS/MCRL2_PYTHON/examples/00_examples_json_specs_enc_eta_clean_with_loops/squareRGB_fig26_PolyLogicA_spec/squareRGB_fig26_poset_python_minimised.txt /Users/mieke/Documents/RESEARCH/VVTOOLS/MCRL2_PYTHON/examples/00_examples_json_specs_enc_eta_clean_with_loops/squareRGB_fig26_PolyLogicA_spec/squareRGB_fig26_poset_python_lps.txt /Users/mieke/Documents/RESEARCH/VVTOOLS/MCRL2_PYTHON/examples/00_examples_json_specs_enc_eta_clean_with_loops/squareRGB_fig26_PolyLogicA_spec/squareRGB_fig26_poset_python.mcrl2\
\
(Or generate executable: still to be done)\
\
 
\f0 \cf0 \CocoaLigature1 \
\
\
}